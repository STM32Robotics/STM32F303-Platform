<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\StarterTemplate.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\StarterTemplate.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6100100: Last Updated: Tue Oct 30 14:40:40 2018
<BR><P>
<H3>Maximum Stack Usage =        464 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; TString::operator +=(const unsigned&) &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[99]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[9]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">NMI_Handler</a><BR>
 <LI><a href="#[24]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[24]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[24]">ADC1_2_IRQHandler</a> from startup_stm32f303xe.o(.text) referenced from startup_stm32f303xe.o(RESET)
 <LI><a href="#[41]">ADC3_IRQHandler</a> from startup_stm32f303xe.o(.text) referenced from startup_stm32f303xe.o(RESET)
 <LI><a href="#[4d]">ADC4_IRQHandler</a> from startup_stm32f303xe.o(.text) referenced from startup_stm32f303xe.o(RESET)
 <LI><a href="#[c]">BusFault_Handler</a> from main.o(.text.BusFault_Handler) referenced from startup_stm32f303xe.o(RESET)
 <LI><a href="#[27]">CAN1_RX1_IRQHandler</a> from startup_stm32f303xe.o(.text) referenced from startup_stm32f303xe.o(RESET)
 <LI><a href="#[28]">CAN1_SCE_IRQHandler</a> from startup_stm32f303xe.o(.text) referenced from startup_stm32f303xe.o(RESET)
 <LI><a href="#[4e]">COMP1_2_3_IRQHandler</a> from startup_stm32f303xe.o(.text) referenced from startup_stm32f303xe.o(RESET)
 <LI><a href="#[4f]">COMP4_5_6_IRQHandler</a> from startup_stm32f303xe.o(.text) referenced from startup_stm32f303xe.o(RESET)
 <LI><a href="#[50]">COMP7_IRQHandler</a> from startup_stm32f303xe.o(.text) referenced from startup_stm32f303xe.o(RESET)
 <LI><a href="#[1d]">DMA1_Channel1_IRQHandler</a> from startup_stm32f303xe.o(.text) referenced from startup_stm32f303xe.o(RESET)
 <LI><a href="#[1e]">DMA1_Channel2_IRQHandler</a> from startup_stm32f303xe.o(.text) referenced from startup_stm32f303xe.o(RESET)
 <LI><a href="#[1f]">DMA1_Channel3_IRQHandler</a> from startup_stm32f303xe.o(.text) referenced from startup_stm32f303xe.o(RESET)
 <LI><a href="#[20]">DMA1_Channel4_IRQHandler</a> from startup_stm32f303xe.o(.text) referenced from startup_stm32f303xe.o(RESET)
 <LI><a href="#[21]">DMA1_Channel5_IRQHandler</a> from startup_stm32f303xe.o(.text) referenced from startup_stm32f303xe.o(RESET)
 <LI><a href="#[22]">DMA1_Channel6_IRQHandler</a> from startup_stm32f303xe.o(.text) referenced from startup_stm32f303xe.o(RESET)
 <LI><a href="#[23]">DMA1_Channel7_IRQHandler</a> from startup_stm32f303xe.o(.text) referenced from startup_stm32f303xe.o(RESET)
 <LI><a href="#[48]">DMA2_Channel1_IRQHandler</a> from startup_stm32f303xe.o(.text) referenced from startup_stm32f303xe.o(RESET)
 <LI><a href="#[49]">DMA2_Channel2_IRQHandler</a> from startup_stm32f303xe.o(.text) referenced from startup_stm32f303xe.o(RESET)
 <LI><a href="#[4a]">DMA2_Channel3_IRQHandler</a> from startup_stm32f303xe.o(.text) referenced from startup_stm32f303xe.o(RESET)
 <LI><a href="#[4b]">DMA2_Channel4_IRQHandler</a> from startup_stm32f303xe.o(.text) referenced from startup_stm32f303xe.o(RESET)
 <LI><a href="#[4c]">DMA2_Channel5_IRQHandler</a> from startup_stm32f303xe.o(.text) referenced from startup_stm32f303xe.o(RESET)
 <LI><a href="#[f]">DebugMon_Handler</a> from main.o(.text.DebugMon_Handler) referenced from startup_stm32f303xe.o(RESET)
 <LI><a href="#[18]">EXTI0_IRQHandler</a> from startup_stm32f303xe.o(.text) referenced from startup_stm32f303xe.o(RESET)
 <LI><a href="#[3a]">EXTI15_10_IRQHandler</a> from startup_stm32f303xe.o(.text) referenced from startup_stm32f303xe.o(RESET)
 <LI><a href="#[19]">EXTI1_IRQHandler</a> from startup_stm32f303xe.o(.text) referenced from startup_stm32f303xe.o(RESET)
 <LI><a href="#[1a]">EXTI2_TS_IRQHandler</a> from startup_stm32f303xe.o(.text) referenced from startup_stm32f303xe.o(RESET)
 <LI><a href="#[1b]">EXTI3_IRQHandler</a> from startup_stm32f303xe.o(.text) referenced from startup_stm32f303xe.o(RESET)
 <LI><a href="#[1c]">EXTI4_IRQHandler</a> from startup_stm32f303xe.o(.text) referenced from startup_stm32f303xe.o(RESET)
 <LI><a href="#[29]">EXTI9_5_IRQHandler</a> from startup_stm32f303xe.o(.text) referenced from startup_stm32f303xe.o(RESET)
 <LI><a href="#[16]">FLASH_IRQHandler</a> from startup_stm32f303xe.o(.text) referenced from startup_stm32f303xe.o(RESET)
 <LI><a href="#[42]">FMC_IRQHandler</a> from startup_stm32f303xe.o(.text) referenced from startup_stm32f303xe.o(RESET)
 <LI><a href="#[5a]">FPU_IRQHandler</a> from startup_stm32f303xe.o(.text) referenced from startup_stm32f303xe.o(RESET)
 <LI><a href="#[63]">GPIO_Init</a> from stm32f30x_gpio.o(.text.GPIO_Init) referenced from dcmotorsystem.o(.text._Z11DCMotorInitv)
 <LI><a href="#[61]">GPIO_PinAFConfig</a> from stm32f30x_gpio.o(.text.GPIO_PinAFConfig) referenced from utilities.o(.text._Z10RGBLEDInitv)
 <LI><a href="#[68]">GPIO_WriteBit</a> from stm32f30x_gpio.o(.text.GPIO_WriteBit) referenced from lcdsystem.o(.text._ZL8LCD_Sendt13LCD_SEND_TYPE)
 <LI><a href="#[a]">HardFault_Handler</a> from main.o(.text.HardFault_Handler) referenced from startup_stm32f303xe.o(RESET)
 <LI><a href="#[32]">I2C1_ER_IRQHandler</a> from startup_stm32f303xe.o(.text) referenced from startup_stm32f303xe.o(RESET)
 <LI><a href="#[31]">I2C1_EV_IRQHandler</a> from startup_stm32f303xe.o(.text) referenced from startup_stm32f303xe.o(RESET)
 <LI><a href="#[34]">I2C2_ER_IRQHandler</a> from startup_stm32f303xe.o(.text) referenced from startup_stm32f303xe.o(RESET)
 <LI><a href="#[33]">I2C2_EV_IRQHandler</a> from startup_stm32f303xe.o(.text) referenced from startup_stm32f303xe.o(RESET)
 <LI><a href="#[52]">I2C3_ER_IRQHandler</a> from startup_stm32f303xe.o(.text) referenced from startup_stm32f303xe.o(RESET)
 <LI><a href="#[51]">I2C3_EV_IRQHandler</a> from startup_stm32f303xe.o(.text) referenced from startup_stm32f303xe.o(RESET)
 <LI><a href="#[b]">MemManage_Handler</a> from main.o(.text.MemManage_Handler) referenced from startup_stm32f303xe.o(RESET)
 <LI><a href="#[9]">NMI_Handler</a> from startup_stm32f303xe.o(.text) referenced from startup_stm32f303xe.o(RESET)
 <LI><a href="#[13]">PVD_IRQHandler</a> from startup_stm32f303xe.o(.text) referenced from startup_stm32f303xe.o(RESET)
 <LI><a href="#[10]">PendSV_Handler</a> from main.o(.text.PendSV_Handler) referenced from startup_stm32f303xe.o(RESET)
 <LI><a href="#[17]">RCC_IRQHandler</a> from startup_stm32f303xe.o(.text) referenced from startup_stm32f303xe.o(RESET)
 <LI><a href="#[3b]">RTC_Alarm_IRQHandler</a> from startup_stm32f303xe.o(.text) referenced from startup_stm32f303xe.o(RESET)
 <LI><a href="#[15]">RTC_WKUP_IRQHandler</a> from startup_stm32f303xe.o(.text) referenced from startup_stm32f303xe.o(RESET)
 <LI><a href="#[8]">Reset_Handler</a> from startup_stm32f303xe.o(.text) referenced from startup_stm32f303xe.o(RESET)
 <LI><a href="#[35]">SPI1_IRQHandler</a> from startup_stm32f303xe.o(.text) referenced from startup_stm32f303xe.o(RESET)
 <LI><a href="#[36]">SPI2_IRQHandler</a> from startup_stm32f303xe.o(.text) referenced from startup_stm32f303xe.o(RESET)
 <LI><a href="#[43]">SPI3_IRQHandler</a> from startup_stm32f303xe.o(.text) referenced from startup_stm32f303xe.o(RESET)
 <LI><a href="#[5b]">SPI4_IRQHandler</a> from startup_stm32f303xe.o(.text) referenced from startup_stm32f303xe.o(RESET)
 <LI><a href="#[e]">SVC_Handler</a> from main.o(.text.SVC_Handler) referenced from startup_stm32f303xe.o(RESET)
 <LI><a href="#[11]">SysTick_Handler</a> from systick.o(.text.SysTick_Handler) referenced from startup_stm32f303xe.o(RESET)
 <LI><a href="#[5c]">SystemInit</a> from system_stm32f30x.o(.text.SystemInit) referenced from startup_stm32f303xe.o(.text)
 <LI><a href="#[14]">TAMPER_STAMP_IRQHandler</a> from startup_stm32f303xe.o(.text) referenced from startup_stm32f303xe.o(RESET)
 <LI><a href="#[2a]">TIM1_BRK_TIM15_IRQHandler</a> from startup_stm32f303xe.o(.text) referenced from startup_stm32f303xe.o(RESET)
 <LI><a href="#[2d]">TIM1_CC_IRQHandler</a> from timercallback.o(.text.TIM1_CC_IRQHandler) referenced from startup_stm32f303xe.o(RESET)
 <LI><a href="#[2c]">TIM1_TRG_COM_TIM17_IRQHandler</a> from startup_stm32f303xe.o(.text) referenced from startup_stm32f303xe.o(RESET)
 <LI><a href="#[2b]">TIM1_UP_TIM16_IRQHandler</a> from startup_stm32f303xe.o(.text) referenced from startup_stm32f303xe.o(RESET)
 <LI><a href="#[56]">TIM20_BRK_IRQHandler</a> from startup_stm32f303xe.o(.text) referenced from startup_stm32f303xe.o(RESET)
 <LI><a href="#[59]">TIM20_CC_IRQHandler</a> from timercallback.o(.text.TIM20_CC_IRQHandler) referenced from startup_stm32f303xe.o(RESET)
 <LI><a href="#[58]">TIM20_TRG_COM_IRQHandler</a> from startup_stm32f303xe.o(.text) referenced from startup_stm32f303xe.o(RESET)
 <LI><a href="#[57]">TIM20_UP_IRQHandler</a> from startup_stm32f303xe.o(.text) referenced from startup_stm32f303xe.o(RESET)
 <LI><a href="#[2e]">TIM2_IRQHandler</a> from timercallback.o(.text.TIM2_IRQHandler) referenced from startup_stm32f303xe.o(RESET)
 <LI><a href="#[2f]">TIM3_IRQHandler</a> from timercallback.o(.text.TIM3_IRQHandler) referenced from startup_stm32f303xe.o(RESET)
 <LI><a href="#[30]">TIM4_IRQHandler</a> from timercallback.o(.text.TIM4_IRQHandler) referenced from startup_stm32f303xe.o(RESET)
 <LI><a href="#[46]">TIM6_DAC_IRQHandler</a> from startup_stm32f303xe.o(.text) referenced from startup_stm32f303xe.o(RESET)
 <LI><a href="#[47]">TIM7_IRQHandler</a> from timercallback.o(.text.TIM7_IRQHandler) referenced from startup_stm32f303xe.o(RESET)
 <LI><a href="#[3d]">TIM8_BRK_IRQHandler</a> from startup_stm32f303xe.o(.text) referenced from startup_stm32f303xe.o(RESET)
 <LI><a href="#[40]">TIM8_CC_IRQHandler</a> from timercallback.o(.text.TIM8_CC_IRQHandler) referenced from startup_stm32f303xe.o(RESET)
 <LI><a href="#[3f]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32f303xe.o(.text) referenced from startup_stm32f303xe.o(RESET)
 <LI><a href="#[3e]">TIM8_UP_IRQHandler</a> from startup_stm32f303xe.o(.text) referenced from startup_stm32f303xe.o(RESET)
 <LI><a href="#[44]">UART4_IRQHandler</a> from startup_stm32f303xe.o(.text) referenced from startup_stm32f303xe.o(RESET)
 <LI><a href="#[45]">UART5_IRQHandler</a> from startup_stm32f303xe.o(.text) referenced from startup_stm32f303xe.o(RESET)
 <LI><a href="#[37]">USART1_IRQHandler</a> from rs232.o(.text.USART1_IRQHandler) referenced from startup_stm32f303xe.o(RESET)
 <LI><a href="#[38]">USART2_IRQHandler</a> from startup_stm32f303xe.o(.text) referenced from startup_stm32f303xe.o(RESET)
 <LI><a href="#[39]">USART3_IRQHandler</a> from startup_stm32f303xe.o(.text) referenced from startup_stm32f303xe.o(RESET)
 <LI><a href="#[3c]">USBWakeUp_IRQHandler</a> from startup_stm32f303xe.o(.text) referenced from startup_stm32f303xe.o(RESET)
 <LI><a href="#[55]">USBWakeUp_RMP_IRQHandler</a> from startup_stm32f303xe.o(.text) referenced from startup_stm32f303xe.o(RESET)
 <LI><a href="#[25]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f303xe.o(.text) referenced from startup_stm32f303xe.o(RESET)
 <LI><a href="#[53]">USB_HP_IRQHandler</a> from startup_stm32f303xe.o(.text) referenced from startup_stm32f303xe.o(RESET)
 <LI><a href="#[26]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f303xe.o(.text) referenced from startup_stm32f303xe.o(RESET)
 <LI><a href="#[54]">USB_LP_IRQHandler</a> from startup_stm32f303xe.o(.text) referenced from startup_stm32f303xe.o(RESET)
 <LI><a href="#[d]">UsageFault_Handler</a> from main.o(.text.UsageFault_Handler) referenced from startup_stm32f303xe.o(RESET)
 <LI><a href="#[12]">WWDG_IRQHandler</a> from startup_stm32f303xe.o(.text) referenced from startup_stm32f303xe.o(RESET)
 <LI><a href="#[79]">_GLOBAL__sub_I_CommandSystem.cpp</a> from commandsystem.o(.text._GLOBAL__sub_I_CommandSystem.cpp) referenced from commandsystem.o(.init_array)
 <LI><a href="#[77]">_GLOBAL__sub_I_RS232.cpp</a> from rs232.o(.text._GLOBAL__sub_I_RS232.cpp) referenced from rs232.o(.init_array)
 <LI><a href="#[7a]">_GLOBAL__sub_I_TimerCallback.cpp</a> from timercallback.o(.text._GLOBAL__sub_I_TimerCallback.cpp) referenced from timercallback.o(.init_array)
 <LI><a href="#[78]">_GLOBAL__sub_I_main.cpp</a> from main.o(.text._GLOBAL__sub_I_main.cpp) referenced from main.o(.init_array)
 <LI><a href="#[6f]">LCDCommand(TString&)</a> from main.o(.text._Z10LCDCommandR7TString) referenced from main.o(.text.main)
 <LI><a href="#[74]">SwitchType(TString&)</a> from main.o(.text._Z10SwitchTypeR7TString) referenced from main.o(.text.main)
 <LI><a href="#[6a]">LEDCallback(TString&)</a> from main.o(.text._Z11LEDCallbackR7TString) referenced from main.o(.text.main)
 <LI><a href="#[69]">SetLEDColor(int, int, int)</a> from utilities.o(.text._Z11SetLEDColoriii) referenced from main.o(.text.main)
 <LI><a href="#[75]">FirstConnect(TString&)</a> from main.o(.text._Z12FirstConnectR7TString) referenced from main.o(.text.main)
 <LI><a href="#[70]">MotorCommand(TString&)</a> from main.o(.text._Z12MotorCommandR7TString) referenced from main.o(.text.main)
 <LI><a href="#[6e]">ReportOnline(TString&)</a> from main.o(.text._Z12ReportOnlineR7TString) referenced from main.o(.text.main)
 <LI><a href="#[6c]">ResetCommand(TString&)</a> from main.o(.text._Z12ResetCommandR7TString) referenced from main.o(.text.main)
 <LI><a href="#[73]">GetUIDCommand(TString&)</a> from main.o(.text._Z13GetUIDCommandR7TString) referenced from main.o(.text.main)
 <LI><a href="#[76]">LCDSendString(const char*)</a> from lcdsystem.o(.text._Z13LCDSendStringPKc) referenced from main.o(.text.main)
 <LI><a href="#[71]">StepperCommand(TString&)</a> from main.o(.text._Z14StepperCommandR7TString) referenced from main.o(.text.main)
 <LI><a href="#[6d]">PingPongCommand(TString&)</a> from main.o(.text._Z15PingPongCommandR7TString) referenced from main.o(.text.main)
 <LI><a href="#[6b]">AddCommandHandler(void(*)(TString&), const char*)</a> from commandsystem.o(.text._Z17AddCommandHandlerPFvR7TStringEPKc) referenced from main.o(.text.main)
 <LI><a href="#[66]">Delay(unsigned)</a> from utilities.o(.text._Z5Delayj) referenced from lcdsystem.o(.text._Z7LCDInitv)
 <LI><a href="#[66]">Delay(unsigned)</a> from utilities.o(.text._Z5Delayj) referenced from main.o(.text.main)
 <LI><a href="#[72]">ServoCMD(TString&)</a> from main.o(.text._Z8ServoCMDR7TString) referenced from main.o(.text.main)
 <LI><a href="#[64]">TIM4Hand()</a> from steppermotor.o(.text._Z8TIM4Handv) referenced from steppermotor.o(.text._Z11StepperInitv)
 <LI><a href="#[65]">_ZL16LCD_Send_HNibblet</a> from lcdsystem.o(.text._ZL16LCD_Send_HNibblet) referenced from lcdsystem.o(.text._Z7LCDInitv)
 <LI><a href="#[67]">_ZL8LCD_Sendt13LCD_SEND_TYPE</a> from lcdsystem.o(.text._ZL8LCD_Sendt13LCD_SEND_TYPE) referenced from lcdsystem.o(.text._Z7LCDInitv)
 <LI><a href="#[60]">TString::TString()</a> from stringclass.o(.text._ZN7TStringC2Ev) referenced from main.o(.text._GLOBAL__sub_I_main.cpp)
 <LI><a href="#[62]">TString::operator +=(const unsigned&)</a> from stringclass.o(.text._ZN7TStringpLERKj) referenced from main.o(.text._Z10RequestUIDv)
 <LI><a href="#[7b]">__main</a> from __main.o(!!!main) referenced from startup_stm32f303xe.o(.text)
 <LI><a href="#[5f]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[5e]">_snputc</a> from _snputc.o(.text) referenced from __2snprintf.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[7b]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[7d]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[7f]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[10b]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[10c]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[80]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[10d]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[81]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[97]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[10e]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[89]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[83]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[10f]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[110]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[111]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[112]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[85]"></a>__rt_lib_init_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_cpp_2 &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[113]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[114]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[115]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[116]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[117]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[118]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[119]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[11a]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[11b]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[11c]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[11d]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[11e]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[11f]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[120]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[121]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[122]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[8e]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[123]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[124]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[125]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[126]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[127]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[128]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[129]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[7e]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[12a]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[86]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[88]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[12b]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[8a]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; TString::operator +=(const unsigned&) &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[12c]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[9a]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[8d]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[12d]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[8f]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[8]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f303xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xe.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f303xe.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xe.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xe.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xe.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xe.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>ADC4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xe.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xe.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xe.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>COMP1_2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xe.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>COMP4_5_6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xe.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>COMP7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xe.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xe.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xe.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xe.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xe.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xe.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xe.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xe.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xe.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xe.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xe.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>DMA2_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xe.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>DMA2_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xe.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xe.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xe.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xe.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>EXTI2_TS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xe.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xe.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xe.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xe.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xe.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xe.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xe.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xe.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xe.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xe.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xe.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xe.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xe.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xe.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xe.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xe.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xe.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xe.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xe.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xe.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>TAMPER_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xe.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TIM1_BRK_TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xe.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>TIM1_TRG_COM_TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xe.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TIM1_UP_TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xe.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>TIM20_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xe.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>TIM20_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xe.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>TIM20_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xe.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xe.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xe.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xe.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xe.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xe.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xe.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xe.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xe.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xe.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>USBWakeUp_RMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xe.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xe.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>USB_HP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xe.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xe.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>USB_LP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xe.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xe.o(RESET)
</UL>
<P><STRONG><a name="[99]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f303xe.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[91]"></a>__2snprintf</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, __2snprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TString::operator +=(const unsigned&)
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TString::operator +=(const int&)
</UL>

<P><STRONG><a name="[82]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[95]"></a>__printf</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[ff]"></a>strcpy</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, strcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TString::operator =(const char*)
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TString::TString(const char*)
</UL>

<P><STRONG><a name="[d9]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS232SendString(const char*)
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TString::DoesWordEqualTo(unsigned, TString&)
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TString::operator ==(const char*) const
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TString::operator +=(const unsigned&)
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TString::operator +=(const int&)
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TString::operator =(const char*)
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TString::TString(const char*)
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TString::DoesWordEqualTo(unsigned, const char*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDSendString(const char*)
</UL>

<P><STRONG><a name="[a2]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OCStructInit
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TString::DoesWordEqualTo(unsigned, TString&)
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TString::DoesWordEqualTo(unsigned, const char*)
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TString::GetIntFromWord(unsigned)
</UL>

<P><STRONG><a name="[12e]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[12f]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[130]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[131]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[0]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[7c]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, init_aeabi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_cpp_2
</UL>

<P><STRONG><a name="[94]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[92]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>

<P><STRONG><a name="[93]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>

<P><STRONG><a name="[5e]"></a>_snputc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _snputc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __2snprintf.o(.text)
</UL>
<P><STRONG><a name="[90]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[132]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[98]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[133]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[134]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[135]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[136]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[87]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[8c]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[c]"></a>BusFault_Handler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, main.o(.text.BusFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = BusFault_Handler &rArr; LCDSendString(const char*) &rArr; LCDSendChar(unsigned short) &rArr; _ZL8LCD_Sendt13LCD_SEND_TYPE &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDSetPos(e_lcdline, unsigned char)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDSendString(const char*)
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDClearLine(e_lcdline)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xe.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>DebugMon_Handler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, main.o(.text.DebugMon_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = DebugMon_Handler &rArr; LCDSendString(const char*) &rArr; LCDSendChar(unsigned short) &rArr; _ZL8LCD_Sendt13LCD_SEND_TYPE &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDSetPos(e_lcdline, unsigned char)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDSendString(const char*)
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDClearLine(e_lcdline)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xe.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>GPIO_Init</STRONG> (Thumb, 116 bytes, Stack size 20 bytes, stm32f30x_gpio.o(.text.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDInit()
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGBLEDInit()
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepperInit()
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS232Init()
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServoInit()
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDInit()
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL8LCD_Sendt13LCD_SEND_TYPE
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dcmotorsystem.o(.text._Z11DCMotorInitv)
</UL>
<P><STRONG><a name="[61]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32f30x_gpio.o(.text.GPIO_PinAFConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS232Init()
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMotorInit()
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServoInit()
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDInit()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> utilities.o(.text._Z10RGBLEDInitv)
</UL>
<P><STRONG><a name="[fd]"></a>GPIO_ReadInputData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f30x_gpio.o(.text.GPIO_ReadInputData))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL8LCD_Sendt13LCD_SEND_TYPE
</UL>

<P><STRONG><a name="[c5]"></a>GPIO_ReadOutputDataBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f30x_gpio.o(.text.GPIO_ReadOutputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLEDState()
</UL>

<P><STRONG><a name="[cd]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f30x_gpio.o(.text.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLEDState(bool)
</UL>

<P><STRONG><a name="[cc]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f30x_gpio.o(.text.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLEDState(bool)
</UL>

<P><STRONG><a name="[68]"></a>GPIO_WriteBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f30x_gpio.o(.text.GPIO_WriteBit))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL8LCD_Sendt13LCD_SEND_TYPE
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16LCD_Send_HNibblet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcdsystem.o(.text._ZL8LCD_Sendt13LCD_SEND_TYPE)
</UL>
<P><STRONG><a name="[a]"></a>HardFault_Handler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, main.o(.text.HardFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HardFault_Handler &rArr; LCDSendString(const char*) &rArr; LCDSendChar(unsigned short) &rArr; _ZL8LCD_Sendt13LCD_SEND_TYPE &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDSetPos(e_lcdline, unsigned char)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDSendString(const char*)
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDClearLine(e_lcdline)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xe.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>MemManage_Handler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, main.o(.text.MemManage_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = MemManage_Handler &rArr; LCDSendString(const char*) &rArr; LCDSendChar(unsigned short) &rArr; _ZL8LCD_Sendt13LCD_SEND_TYPE &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDSetPos(e_lcdline, unsigned char)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDSendString(const char*)
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDClearLine(e_lcdline)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xe.o(RESET)
</UL>
<P><STRONG><a name="[d0]"></a>NVIC_Init</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, stm32f30x_misc.o(.text.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickInit()
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepperInit()
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS232Init()
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServoInit()
</UL>

<P><STRONG><a name="[10]"></a>PendSV_Handler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, main.o(.text.PendSV_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = PendSV_Handler &rArr; LCDSendString(const char*) &rArr; LCDSendChar(unsigned short) &rArr; _ZL8LCD_Sendt13LCD_SEND_TYPE &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDSetPos(e_lcdline, unsigned char)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDSendString(const char*)
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDClearLine(e_lcdline)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xe.o(RESET)
</UL>
<P><STRONG><a name="[af]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f30x_rcc.o(.text.RCC_AHBPeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDInit()
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGBLEDInit()
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepperInit()
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS232Init()
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMotorInit()
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServoInit()
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDInit()
</UL>

<P><STRONG><a name="[cf]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f30x_rcc.o(.text.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepperInit()
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServoInit()
</UL>

<P><STRONG><a name="[b1]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f30x_rcc.o(.text.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGBLEDInit()
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS232Init()
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMotorInit()
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDInit()
</UL>

<P><STRONG><a name="[aa]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 780 bytes, Stack size 36 bytes, stm32f30x_rcc.o(.text.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetClockFreq()
</UL>

<P><STRONG><a name="[e]"></a>SVC_Handler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, main.o(.text.SVC_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = SVC_Handler &rArr; LCDSendString(const char*) &rArr; LCDSendChar(unsigned short) &rArr; _ZL8LCD_Sendt13LCD_SEND_TYPE &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDSetPos(e_lcdline, unsigned char)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDSendString(const char*)
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDClearLine(e_lcdline)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xe.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>SysTick_Handler</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, systick.o(.text.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xe.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>SystemInit</STRONG> (Thumb, 248 bytes, Stack size 8 bytes, system_stm32f30x.o(.text.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemInit
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xe.o(.text)
</UL>
<P><STRONG><a name="[2d]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 168 bytes, Stack size 8 bytes, timercallback.o(.text.TIM1_CC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TIM1_CC_IRQHandler &rArr; ExecuteTimerCallback(const char*) &rArr; TString::operator ==(const char*) const &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExecuteTimerCallback(const char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xe.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>TIM20_CC_IRQHandler</STRONG> (Thumb, 164 bytes, Stack size 8 bytes, timercallback.o(.text.TIM20_CC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TIM20_CC_IRQHandler &rArr; ExecuteTimerCallback(const char*) &rArr; TString::operator ==(const char*) const &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExecuteTimerCallback(const char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xe.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>TIM2_IRQHandler</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, timercallback.o(.text.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2PWM()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xe.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>TIM3_IRQHandler</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, timercallback.o(.text.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TIM3_IRQHandler &rArr; ExecuteTimerCallback(const char*) &rArr; TString::operator ==(const char*) const &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExecuteTimerCallback(const char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xe.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>TIM4_IRQHandler</STRONG> (Thumb, 168 bytes, Stack size 8 bytes, timercallback.o(.text.TIM4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TIM4_IRQHandler &rArr; ExecuteTimerCallback(const char*) &rArr; TString::operator ==(const char*) const &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExecuteTimerCallback(const char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xe.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>TIM7_IRQHandler</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, timercallback.o(.text.TIM7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TIM7_IRQHandler &rArr; ExecuteTimerCallback(const char*) &rArr; TString::operator ==(const char*) const &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExecuteTimerCallback(const char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xe.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, timercallback.o(.text.TIM8_CC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TIM8_CC_IRQHandler &rArr; ExecuteTimerCallback(const char*) &rArr; TString::operator ==(const char*) const &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExecuteTimerCallback(const char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xe.o(RESET)
</UL>
<P><STRONG><a name="[ba]"></a>TIM_ARRPreloadConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f30x_tim.o(.text.TIM_ARRPreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGBLEDInit()
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMotorInit()
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDInit()
</UL>

<P><STRONG><a name="[bc]"></a>TIM_BDTRConfig</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f30x_tim.o(.text.TIM_BDTRConfig))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGBLEDInit()
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMotorInit()
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDInit()
</UL>

<P><STRONG><a name="[bb]"></a>TIM_BDTRStructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f30x_tim.o(.text.TIM_BDTRStructInit))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGBLEDInit()
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMotorInit()
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDInit()
</UL>

<P><STRONG><a name="[bd]"></a>TIM_CCPreloadControl</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f30x_tim.o(.text.TIM_CCPreloadControl))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGBLEDInit()
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMotorInit()
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDInit()
</UL>

<P><STRONG><a name="[9e]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f30x_tim.o(.text.TIM_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CC_IRQHandler
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM7_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM20_CC_IRQHandler
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CC_IRQHandler
</UL>

<P><STRONG><a name="[bf]"></a>TIM_Cmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f30x_tim.o(.text.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGBLEDInit()
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepperInit()
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMotorInit()
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDInit()
</UL>

<P><STRONG><a name="[be]"></a>TIM_CtrlPWMOutputs</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f30x_tim.o(.text.TIM_CtrlPWMOutputs))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGBLEDInit()
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMotorInit()
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDInit()
</UL>

<P><STRONG><a name="[9d]"></a>TIM_GetITStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f30x_tim.o(.text.TIM_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CC_IRQHandler
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM7_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM20_CC_IRQHandler
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CC_IRQHandler
</UL>

<P><STRONG><a name="[d1]"></a>TIM_ITConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f30x_tim.o(.text.TIM_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepperInit()
</UL>

<P><STRONG><a name="[b4]"></a>TIM_OC1Init</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, stm32f30x_tim.o(.text.TIM_OC1Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_OC1Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGBLEDInit()
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMotorInit()
</UL>

<P><STRONG><a name="[b5]"></a>TIM_OC1PreloadConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f30x_tim.o(.text.TIM_OC1PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGBLEDInit()
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMotorInit()
</UL>

<P><STRONG><a name="[b6]"></a>TIM_OC2Init</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, stm32f30x_tim.o(.text.TIM_OC2Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_OC2Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGBLEDInit()
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMotorInit()
</UL>

<P><STRONG><a name="[b7]"></a>TIM_OC2PreloadConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f30x_tim.o(.text.TIM_OC2PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGBLEDInit()
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMotorInit()
</UL>

<P><STRONG><a name="[b8]"></a>TIM_OC3Init</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, stm32f30x_tim.o(.text.TIM_OC3Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_OC3Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGBLEDInit()
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDInit()
</UL>

<P><STRONG><a name="[b9]"></a>TIM_OC3PreloadConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f30x_tim.o(.text.TIM_OC3PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGBLEDInit()
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDInit()
</UL>

<P><STRONG><a name="[fb]"></a>TIM_OC4Init</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, stm32f30x_tim.o(.text.TIM_OC4Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_OC4Init
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServoInit()
</UL>

<P><STRONG><a name="[fc]"></a>TIM_OC4PreloadConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f30x_tim.o(.text.TIM_OC4PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServoInit()
</UL>

<P><STRONG><a name="[a1]"></a>TIM_OCStructInit</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f30x_tim.o(.text.TIM_OCStructInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OCStructInit &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGBLEDInit()
</UL>

<P><STRONG><a name="[c8]"></a>TIM_SetCompare1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f30x_tim.o(.text.TIM_SetCompare1))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLEDColor(int, int, int)
</UL>

<P><STRONG><a name="[c9]"></a>TIM_SetCompare2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f30x_tim.o(.text.TIM_SetCompare2))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLEDColor(int, int, int)
</UL>

<P><STRONG><a name="[ca]"></a>TIM_SetCompare3</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f30x_tim.o(.text.TIM_SetCompare3))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLEDColor(int, int, int)
</UL>

<P><STRONG><a name="[b3]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, stm32f30x_tim.o(.text.TIM_TimeBaseInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_TimeBaseInit
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGBLEDInit()
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepperInit()
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMotorInit()
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServoInit()
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDInit()
</UL>

<P><STRONG><a name="[b2]"></a>TIM_TimeBaseStructInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f30x_tim.o(.text.TIM_TimeBaseStructInit))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGBLEDInit()
</UL>

<P><STRONG><a name="[d2]"></a>TIM_UpdateDisableConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f30x_tim.o(.text.TIM_UpdateDisableConfig))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4Hand()
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper(unsigned, unsigned char, unsigned, bool)
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepperInit()
</UL>

<P><STRONG><a name="[37]"></a>USART1_IRQHandler</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, rs232.o(.text.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USART1_IRQHandler &rArr; AddCommandToQueue(TString&) &rArr; TString::operator ==(TString&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TString::operator +=(const char&)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TString::GetLength()
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TString::Clear()
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddCommandToQueue(TString&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xe.o(RESET)
</UL>
<P><STRONG><a name="[f6]"></a>USART_Cmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f30x_usart.o(.text.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS232Init()
</UL>

<P><STRONG><a name="[f8]"></a>USART_GetFlagStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f30x_usart.o(.text.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS232Send(char)
</UL>

<P><STRONG><a name="[a3]"></a>USART_GetITStatus</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, stm32f30x_usart.o(.text.USART_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[f7]"></a>USART_ITConfig</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32f30x_usart.o(.text.USART_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS232Init()
</UL>

<P><STRONG><a name="[a9]"></a>USART_Init</STRONG> (Thumb, 200 bytes, Stack size 112 bytes, stm32f30x_usart.o(.text.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS232Init()
</UL>

<P><STRONG><a name="[a4]"></a>USART_ReceiveData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f30x_usart.o(.text.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[f9]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f30x_usart.o(.text.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS232Send(char)
</UL>

<P><STRONG><a name="[d]"></a>UsageFault_Handler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, main.o(.text.UsageFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = UsageFault_Handler &rArr; LCDSendString(const char*) &rArr; LCDSendChar(unsigned short) &rArr; _ZL8LCD_Sendt13LCD_SEND_TYPE &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDSetPos(e_lcdline, unsigned char)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDSendString(const char*)
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDClearLine(e_lcdline)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xe.o(RESET)
</UL>
<P><STRONG><a name="[101]"></a>DelayMicro(unsigned)</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, utilities.o(.text._Z10DelayMicroj))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6f]"></a>LCDCommand(TString&)</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, main.o(.text._Z10LCDCommandR7TString))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LCDCommand(TString&) &rArr; TString::DoesWordEqualTo(unsigned, const char*) &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TString::RemoveFirstWords(unsigned)
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TString::DoesWordEqualTo(unsigned, const char*)
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDSendString(TString&)
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDClearLine(e_lcdline)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.main)
</UL>
<P><STRONG><a name="[ae]"></a>RGBLEDInit()</STRONG> (Thumb, 300 bytes, Stack size 80 bytes, utilities.o(.text._Z10RGBLEDInitv))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = RGBLEDInit() &rArr; GetClockFreq() &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseStructInit
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OCStructInit
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3PreloadConfig
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3Init
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2PreloadConfig
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2Init
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1PreloadConfig
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1Init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CtrlPWMOutputs
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCPreloadControl
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_BDTRStructInit
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_BDTRConfig
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ARRPreloadConfig
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetClockFreq()
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLEDColor(int, int, int)
</UL>

<P><STRONG><a name="[c0]"></a>RequestUID()</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, main.o(.text._Z10RequestUIDv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RequestUID() &rArr; RS232SendString(TString&) &rArr; RS232Send(char)
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS232SendString(TString&)
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TString::operator =(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUIDCommand(TString&)
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FirstConnect(TString&)
</UL>

<P><STRONG><a name="[74]"></a>SwitchType(TString&)</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, main.o(.text._Z10SwitchTypeR7TString))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SwitchType(TString&) &rArr; TString::DoesWordEqualTo(unsigned, const char*) &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TString::DoesWordEqualTo(unsigned, const char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.main)
</UL>
<P><STRONG><a name="[c3]"></a>DCMotorInit()</STRONG> (Thumb, 284 bytes, Stack size 24 bytes, dcmotorsystem.o(.text._Z11DCMotorInitv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DCMotorInit() &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2PreloadConfig
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2Init
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1PreloadConfig
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1Init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CtrlPWMOutputs
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCPreloadControl
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_BDTRStructInit
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_BDTRConfig
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ARRPreloadConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c4]"></a>GetLEDState()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, utilities.o(.text._Z11GetLEDStatev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetLEDState()
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadOutputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDToggle()
</UL>

<P><STRONG><a name="[c6]"></a>LCDSendChar(unsigned short)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lcdsystem.o(.text._Z11LCDSendChart))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = LCDSendChar(unsigned short) &rArr; _ZL8LCD_Sendt13LCD_SEND_TYPE &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL8LCD_Sendt13LCD_SEND_TYPE
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDSendString(TString&)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDSendString(const char*)
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDClearLine(e_lcdline)
</UL>

<P><STRONG><a name="[6a]"></a>LEDCallback(TString&)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(.text._Z11LEDCallbackR7TString))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = LEDCallback(TString&) &rArr; SetLEDColorEx(TString&) &rArr; SetLEDColor(int, int, int) &rArr; RGBLEDInit() &rArr; GetClockFreq() &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLEDColorEx(TString&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.main)
</UL>
<P><STRONG><a name="[69]"></a>SetLEDColor(int, int, int)</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, utilities.o(.text._Z11SetLEDColoriii))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = SetLEDColor(int, int, int) &rArr; RGBLEDInit() &rArr; GetClockFreq() &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare3
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare2
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare1
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGBLEDInit()
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepperPosInit()
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLEDColorEx(TString&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.main)
</UL>
<P><STRONG><a name="[cb]"></a>SetLEDState(bool)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, utilities.o(.text._Z11SetLEDStateb))
<BR><BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDToggle()
</UL>

<P><STRONG><a name="[ce]"></a>StepperInit()</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, steppermotor.o(.text._Z11StepperInitv))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = StepperInit() &rArr; AddTimerCallback(const char*, void(*)()) &rArr; TString::operator =(const char*) &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_UpdateDisableConfig
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddTimerCallback(const char*, void(*)())
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d4]"></a>SysTickInit()</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, systick.o(.text._Z11SysTickInitv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SysTickInit() &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[75]"></a>FirstConnect(TString&)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(.text._Z12FirstConnectR7TString))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FirstConnect(TString&) &rArr; RequestUID() &rArr; RS232SendString(TString&) &rArr; RS232Send(char)
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RequestUID()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.main)
</UL>
<P><STRONG><a name="[b0]"></a>GetClockFreq()</STRONG> (Thumb, 30 bytes, Stack size 104 bytes, utilities.o(.text._Z12GetClockFreqv))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = GetClockFreq() &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGBLEDInit()
</UL>

<P><STRONG><a name="[9b]"></a>LCDClearLine(e_lcdline)</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, lcdsystem.o(.text._Z12LCDClearLine9e_lcdline))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = LCDClearLine(e_lcdline) &rArr; LCDSendChar(unsigned short) &rArr; _ZL8LCD_Sendt13LCD_SEND_TYPE &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDSendChar(unsigned short)
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL8LCD_Sendt13LCD_SEND_TYPE
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetCommand(TString&)
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDCommand(TString&)
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>

<P><STRONG><a name="[70]"></a>MotorCommand(TString&)</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, main.o(.text._Z12MotorCommandR7TString))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MotorCommand(TString&) &rArr; TString::GetIntFromWord(unsigned) &rArr; fast_atoi(char*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TString::GetIntFromWord(unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.main)
</UL>
<P><STRONG><a name="[6e]"></a>ReportOnline(TString&)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, main.o(.text._Z12ReportOnlineR7TString))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ReportOnline(TString&) &rArr; RS232SendString(const char*) &rArr; RS232Send(char)
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS232SendString(const char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.main)
</UL>
<P><STRONG><a name="[6c]"></a>ResetCommand(TString&)</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, main.o(.text._Z12ResetCommandR7TString))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = ResetCommand(TString&) &rArr; SetLEDColorEx(const char*) &rArr; SetLEDColorEx(TString&) &rArr; SetLEDColor(int, int, int) &rArr; RGBLEDInit() &rArr; GetClockFreq() &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay(unsigned)
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS232SendString(const char*)
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDSetPos(e_lcdline, unsigned char)
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLEDColorEx(const char*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDSendString(const char*)
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDClearLine(e_lcdline)
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18__NVIC_SystemResetv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.main)
</UL>
<P><STRONG><a name="[102]"></a>GetStepAmount()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, steppermotor.o(.text._Z13GetStepAmountv))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[73]"></a>GetUIDCommand(TString&)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(.text._Z13GetUIDCommandR7TString))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GetUIDCommand(TString&) &rArr; RequestUID() &rArr; RS232SendString(TString&) &rArr; RS232Send(char)
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RequestUID()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.main)
</UL>
<P><STRONG><a name="[76]"></a>LCDSendString(const char*)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lcdsystem.o(.text._Z13LCDSendStringPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = LCDSendString(const char*) &rArr; LCDSendChar(unsigned short) &rArr; _ZL8LCD_Sendt13LCD_SEND_TYPE &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDSendChar(unsigned short)
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetCommand(TString&)
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.main)
</UL>
<P><STRONG><a name="[ad]"></a>LCDSendString(TString&)</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lcdsystem.o(.text._Z13LCDSendStringR7TString))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = LCDSendString(TString&) &rArr; LCDSendChar(unsigned short) &rArr; _ZL8LCD_Sendt13LCD_SEND_TYPE &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TString::operator [](unsigned)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TString::GetLength()
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDSendChar(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDCommand(TString&)
</UL>

<P><STRONG><a name="[d7]"></a>SetLEDColorEx(const char*)</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, main.o(.text._Z13SetLEDColorExPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = SetLEDColorEx(const char*) &rArr; SetLEDColorEx(TString&) &rArr; SetLEDColor(int, int, int) &rArr; RGBLEDInit() &rArr; GetClockFreq() &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TString::operator =(const char*)
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLEDColorEx(TString&)
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetCommand(TString&)
</UL>

<P><STRONG><a name="[c7]"></a>SetLEDColorEx(TString&)</STRONG> (Thumb, 420 bytes, Stack size 8 bytes, main.o(.text._Z13SetLEDColorExR7TString))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = SetLEDColorEx(TString&) &rArr; SetLEDColor(int, int, int) &rArr; RGBLEDInit() &rArr; GetClockFreq() &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLEDColor(int, int, int)
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS232SendString(const char*)
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TString::operator ==(const char*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLEDColorEx(const char*)
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDCallback(TString&)
</UL>

<P><STRONG><a name="[71]"></a>StepperCommand(TString&)</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, main.o(.text._Z14StepperCommandR7TString))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = StepperCommand(TString&) &rArr; StepperPosInit() &rArr; SetLEDColor(int, int, int) &rArr; RGBLEDInit() &rArr; GetClockFreq() &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepperPosInit()
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMotor(_motor_sel, unsigned char, _motor_dir)
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TString::DoesWordEqualTo(unsigned, const char*)
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TString::GetIntFromWord(unsigned)
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.main)
</UL>
<P><STRONG><a name="[dd]"></a>StepperPosInit()</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, steppermotor.o(.text._Z14StepperPosInitv))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = StepperPosInit() &rArr; SetLEDColor(int, int, int) &rArr; RGBLEDInit() &rArr; GetClockFreq() &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTimerCounter()
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimerCountMS()
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndTimerCounter()
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZeroTimerCount()
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLEDColor(int, int, int)
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper(unsigned, unsigned char, unsigned, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepperCommand(TString&)
</UL>

<P><STRONG><a name="[e4]"></a>ZeroTimerCount()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, systick.o(.text._Z14ZeroTimerCountv))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepperPosInit()
</UL>

<P><STRONG><a name="[e5]"></a>EndTimerCounter()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, systick.o(.text._Z15EndTimerCounterv))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepperPosInit()
</UL>

<P><STRONG><a name="[e3]"></a>GetTimerCountMS()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, systick.o(.text._Z15GetTimerCountMSv))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepperPosInit()
</UL>

<P><STRONG><a name="[6d]"></a>PingPongCommand(TString&)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(.text._Z15PingPongCommandR7TString))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PingPongCommand(TString&) &rArr; RS232SendString(const char*) &rArr; RS232Send(char)
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS232SendString(const char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.main)
</UL>
<P><STRONG><a name="[d6]"></a>RS232SendString(const char*)</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, rs232.o(.text._Z15RS232SendStringPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RS232SendString(const char*) &rArr; RS232Send(char)
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay(unsigned)
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS232Send(char)
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PingPongCommand(TString&)
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLEDColorEx(TString&)
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetCommand(TString&)
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportOnline(TString&)
</UL>

<P><STRONG><a name="[c2]"></a>RS232SendString(TString&)</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, rs232.o(.text._Z15RS232SendStringR7TString))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RS232SendString(TString&) &rArr; RS232Send(char)
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay(unsigned)
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TString::operator [](unsigned)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TString::GetLength()
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS232Send(char)
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExecuteAllQueueCommands()
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RequestUID()
</UL>

<P><STRONG><a name="[d3]"></a>AddTimerCallback(const char*, void(*)())</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, timercallback.o(.text._Z16AddTimerCallbackPKcPFvvE))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = AddTimerCallback(const char*, void(*)()) &rArr; TString::operator =(const char*) &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TString::operator =(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepperInit()
</UL>

<P><STRONG><a name="[6b]"></a>AddCommandHandler(void(*)(TString&), const char*)</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, commandsystem.o(.text._Z17AddCommandHandlerPFvR7TStringEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = AddCommandHandler(void(*)(TString&), const char*) &rArr; TString::operator =(const char*) &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TString::operator =(const char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.main)
</UL>
<P><STRONG><a name="[a6]"></a>AddCommandToQueue(TString&)</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, commandsystem.o(.text._Z17AddCommandToQueueR7TString))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = AddCommandToQueue(TString&) &rArr; TString::operator ==(TString&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TString::GetLength()
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TString::operator ==(TString&) const
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TString::operator =(const TString&)
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[e9]"></a>InitCommandSystem()</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, commandsystem.o(.text._Z17InitCommandSystemv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = InitCommandSystem()
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TString::Clear()
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ea]"></a>InitTimerCallback()</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, timercallback.o(.text._Z17InitTimerCallbackv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = InitTimerCallback()
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TString::Clear()
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e2]"></a>StartTimerCounter()</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, systick.o(.text._Z17StartTimerCounterv))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepperPosInit()
</UL>

<P><STRONG><a name="[9f]"></a>ExecuteTimerCallback(const char*)</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, timercallback.o(.text._Z20ExecuteTimerCallbackPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ExecuteTimerCallback(const char*) &rArr; TString::operator ==(const char*) const &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TString::operator ==(const char*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CC_IRQHandler
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM7_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM20_CC_IRQHandler
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CC_IRQHandler
</UL>

<P><STRONG><a name="[eb]"></a>ExecuteAllQueueCommands()</STRONG> (Thumb, 208 bytes, Stack size 168 bytes, commandsystem.o(.text._Z23ExecuteAllQueueCommandsv))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = ExecuteAllQueueCommands() &rArr; TString::DoesWordEqualTo(unsigned, TString&) &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TString::GetLength()
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TString::Clear()
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS232SendString(TString&)
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TString::DoesWordEqualTo(unsigned, TString&)
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TString::operator +=(const TString&)
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TString::operator =(const char*)
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TString::TString(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[66]"></a>Delay(unsigned)</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, utilities.o(.text._Z5Delayj))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper(unsigned, unsigned char, unsigned, bool)
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS232SendString(TString&)
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS232SendString(const char*)
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetCommand(TString&)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> main.o(.text.main)
<LI> lcdsystem.o(.text._Z7LCDInitv)
</UL>
<P><STRONG><a name="[f3]"></a>Servo(unsigned)</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, servosystem.o(.text._Z5Servoj))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServoCMD(TString&)
</UL>

<P><STRONG><a name="[dc]"></a>DCMotor(_motor_sel, unsigned char, _motor_dir)</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, dcmotorsystem.o(.text._Z7DCMotor10_motor_selh10_motor_dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DCMotor(_motor_sel, unsigned char, _motor_dir) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepperCommand(TString&)
</UL>

<P><STRONG><a name="[f1]"></a>LCDInit()</STRONG> (Thumb, 320 bytes, Stack size 24 bytes, lcdsystem.o(.text._Z7LCDInitv))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = LCDInit() &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3PreloadConfig
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3Init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CtrlPWMOutputs
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCPreloadControl
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_BDTRStructInit
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_BDTRConfig
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ARRPreloadConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f2]"></a>LEDInit()</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, utilities.o(.text._Z7LEDInitv))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LEDInit() &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDToggle()
</UL>

<P><STRONG><a name="[e1]"></a>Stepper(unsigned, unsigned char, unsigned, bool)</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, steppermotor.o(.text._Z7Stepperjhjb))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Stepper(unsigned, unsigned char, unsigned, bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_UpdateDisableConfig
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepperPosInit()
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[72]"></a>ServoCMD(TString&)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, main.o(.text._Z8ServoCMDR7TString))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ServoCMD(TString&) &rArr; TString::GetIntFromWord(unsigned) &rArr; fast_atoi(char*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TString::GetIntFromWord(unsigned)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Servo(unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.main)
</UL>
<P><STRONG><a name="[64]"></a>TIM4Hand()</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, steppermotor.o(.text._Z8TIM4Handv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM4Hand()
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_UpdateDisableConfig
</UL>
<BR>[Address Reference Count : 1]<UL><LI> steppermotor.o(.text._Z11StepperInitv)
</UL>
<P><STRONG><a name="[9c]"></a>LCDSetPos(e_lcdline, unsigned char)</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, lcdsystem.o(.text._Z9LCDSetPos9e_lcdlineh))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = LCDSetPos(e_lcdline, unsigned char) &rArr; _ZL8LCD_Sendt13LCD_SEND_TYPE &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL8LCD_Sendt13LCD_SEND_TYPE
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetCommand(TString&)
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>

<P><STRONG><a name="[f4]"></a>LEDToggle()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, utilities.o(.text._Z9LEDTogglev))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = LEDToggle() &rArr; LEDInit() &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDInit()
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLEDState(bool)
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLEDState()
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f5]"></a>RS232Init()</STRONG> (Thumb, 144 bytes, Stack size 48 bytes, rs232.o(.text._Z9RS232Initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = RS232Init() &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e6]"></a>RS232Send(char)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, rs232.o(.text._Z9RS232Sendc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RS232Send(char)
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS232SendString(TString&)
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS232SendString(const char*)
</UL>

<P><STRONG><a name="[fa]"></a>ServoInit()</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, servosystem.o(.text._Z9ServoInitv))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ServoInit() &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4PreloadConfig
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a0]"></a>Timer2PWM()</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, servosystem.o(.text._Z9Timer2PWMv))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[fe]"></a>fast_atoi(char*, int)</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, stringclass.o(.text._Z9fast_atoiPci))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fast_atoi(char*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TString::GetIntFromWord(unsigned)
</UL>

<P><STRONG><a name="[d5]"></a>TString::GetIntFromWord(unsigned)</STRONG> (Thumb, 118 bytes, Stack size 56 bytes, stringclass.o(.text._ZN7TString14GetIntFromWordEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = TString::GetIntFromWord(unsigned) &rArr; fast_atoi(char*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_atoi(char*, int)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServoCMD(TString&)
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepperCommand(TString&)
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorCommand(TString&)
</UL>

<P><STRONG><a name="[ab]"></a>TString::DoesWordEqualTo(unsigned, const char*)</STRONG> (Thumb, 150 bytes, Stack size 64 bytes, stringclass.o(.text._ZN7TString15DoesWordEqualToEjPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = TString::DoesWordEqualTo(unsigned, const char*) &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepperCommand(TString&)
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchType(TString&)
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDCommand(TString&)
</UL>

<P><STRONG><a name="[ec]"></a>TString::DoesWordEqualTo(unsigned, TString&)</STRONG> (Thumb, 148 bytes, Stack size 64 bytes, stringclass.o(.text._ZN7TString15DoesWordEqualToEjRS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = TString::DoesWordEqualTo(unsigned, TString&) &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExecuteAllQueueCommands()
</UL>

<P><STRONG><a name="[ac]"></a>TString::RemoveFirstWords(unsigned)</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, stringclass.o(.text._ZN7TString16RemoveFirstWordsEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TString::RemoveFirstWords(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDCommand(TString&)
</UL>

<P><STRONG><a name="[a7]"></a>TString::Clear()</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stringclass.o(.text._ZN7TString5ClearEv))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExecuteAllQueueCommands()
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimerCallback()
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCommandSystem()
</UL>

<P><STRONG><a name="[a5]"></a>TString::GetLength()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stringclass.o(.text._ZN7TString9GetLengthEv))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddCommandToQueue(TString&)
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS232SendString(TString&)
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExecuteAllQueueCommands()
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDSendString(TString&)
</UL>

<P><STRONG><a name="[ee]"></a>TString::TString(const char*)</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, stringclass.o(.text._ZN7TStringC2EPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = TString::TString(const char*) &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExecuteAllQueueCommands()
</UL>

<P><STRONG><a name="[137]"></a>TString::TString__sub_object(const char*)</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, stringclass.o(.text._ZN7TStringC2EPKc), UNUSED)

<P><STRONG><a name="[60]"></a>TString::TString()</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stringclass.o(.text._ZN7TStringC2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_RS232.cpp
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_CommandSystem.cpp
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_TimerCallback.cpp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text._GLOBAL__sub_I_main.cpp)
</UL>
<P><STRONG><a name="[138]"></a>TString::TString__sub_object()</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stringclass.o(.text._ZN7TStringC2Ev), UNUSED)

<P><STRONG><a name="[c1]"></a>TString::operator =(const char*)</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, stringclass.o(.text._ZN7TStringaSEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = TString::operator =(const char*) &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddTimerCallback(const char*, void(*)())
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExecuteAllQueueCommands()
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddCommandHandler(void(*)(TString&), const char*)
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLEDColorEx(const char*)
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RequestUID()
</UL>

<P><STRONG><a name="[e8]"></a>TString::operator =(const TString&)</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stringclass.o(.text._ZN7TStringaSERKS_))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddCommandToQueue(TString&)
</UL>

<P><STRONG><a name="[da]"></a>TString::operator [](unsigned)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stringclass.o(.text._ZN7TStringixEj))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS232SendString(TString&)
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDSendString(TString&)
</UL>

<P><STRONG><a name="[ed]"></a>TString::operator +=(const TString&)</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stringclass.o(.text._ZN7TStringpLERKS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TString::operator +=(const TString&)
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExecuteAllQueueCommands()
</UL>

<P><STRONG><a name="[a8]"></a>TString::operator +=(const char&)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stringclass.o(.text._ZN7TStringpLERKc))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TString::operator +=(const unsigned&)
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TString::operator +=(const int&)
</UL>

<P><STRONG><a name="[100]"></a>TString::operator +=(const int&)</STRONG> (Thumb, 56 bytes, Stack size 144 bytes, stringclass.o(.text._ZN7TStringpLERKi))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = TString::operator +=(const int&) &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TString::operator +=(const char&)
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[62]"></a>TString::operator +=(const unsigned&)</STRONG> (Thumb, 56 bytes, Stack size 144 bytes, stringclass.o(.text._ZN7TStringpLERKj))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = TString::operator +=(const unsigned&) &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TString::operator +=(const char&)
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text._Z10RequestUIDv)
</UL>
<P><STRONG><a name="[db]"></a>TString::operator ==(const char*) const</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, stringclass.o(.text._ZNK7TStringeqEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TString::operator ==(const char*) const &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLEDColorEx(TString&)
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExecuteTimerCallback(const char*)
</UL>

<P><STRONG><a name="[e7]"></a>TString::operator ==(TString&) const</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stringclass.o(.text._ZNK7TStringeqERS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TString::operator ==(TString&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddCommandToQueue(TString&)
</UL>

<P><STRONG><a name="[8b]"></a>main</STRONG> (Thumb, 1188 bytes, Stack size 176 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = main &rArr; TString::operator +=(const unsigned&) &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickInit()
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDToggle()
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLEDColor(int, int, int)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMicro(unsigned)
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper(unsigned, unsigned char, unsigned, bool)
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepperPosInit()
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStepAmount()
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepperInit()
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TString::GetLength()
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TString::Clear()
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS232Init()
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS232SendString(TString&)
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS232SendString(const char*)
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMotor(_motor_sel, unsigned char, _motor_dir)
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMotorInit()
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TString::operator +=(const unsigned&)
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TString::operator +=(const int&)
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TString::operator +=(const TString&)
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TString::operator =(const char*)
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TString::TString(const char*)
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServoInit()
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDSetPos(e_lcdline, unsigned char)
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDInit()
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Servo(unsigned)
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExecuteAllQueueCommands()
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimerCallback()
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCommandSystem()
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLEDColorEx(const char*)
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDSendString(TString&)
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDClearLine(e_lcdline)
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RequestUID()
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[96]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[f0]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMotor(_motor_sel, unsigned char, _motor_dir)
</UL>

<P><STRONG><a name="[103]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[e0]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMotor(_motor_sel, unsigned char, _motor_dir)
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepperCommand(TString&)
</UL>

<P><STRONG><a name="[107]"></a>_dfix</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[de]"></a>__aeabi_i2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepperCommand(TString&)
</UL>

<P><STRONG><a name="[139]"></a>_dflt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[ef]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMotor(_motor_sel, unsigned char, _motor_dir)
</UL>

<P><STRONG><a name="[13a]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[df]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMotor(_motor_sel, unsigned char, _motor_dir)
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepperCommand(TString&)
</UL>

<P><STRONG><a name="[108]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[106]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[105]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[13b]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)

<P><STRONG><a name="[109]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[84]"></a>_fp_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[13c]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[13d]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[5b]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xe.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>_GLOBAL__sub_I_RS232.cpp</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rs232.o(.text._GLOBAL__sub_I_RS232.cpp))
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TString::TString()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232.o(.init_array)
</UL>
<P><STRONG><a name="[78]"></a>_GLOBAL__sub_I_main.cpp</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, main.o(.text._GLOBAL__sub_I_main.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _GLOBAL__sub_I_main.cpp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.init_array)
</UL>
<P><STRONG><a name="[d8]"></a>_ZL18__NVIC_SystemResetv</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, main.o(.text._ZL18__NVIC_SystemResetv))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetCommand(TString&)
</UL>

<P><STRONG><a name="[79]"></a>_GLOBAL__sub_I_CommandSystem.cpp</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, commandsystem.o(.text._GLOBAL__sub_I_CommandSystem.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _GLOBAL__sub_I_CommandSystem.cpp
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TString::TString()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> commandsystem.o(.init_array)
</UL>
<P><STRONG><a name="[7a]"></a>_GLOBAL__sub_I_TimerCallback.cpp</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, timercallback.o(.text._GLOBAL__sub_I_TimerCallback.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _GLOBAL__sub_I_TimerCallback.cpp
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TString::TString()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timercallback.o(.init_array)
</UL>
<P><STRONG><a name="[65]"></a>_ZL16LCD_Send_HNibblet</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lcdsystem.o(.text._ZL16LCD_Send_HNibblet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _ZL16LCD_Send_HNibblet
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL8LCD_Sendt13LCD_SEND_TYPE
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcdsystem.o(.text._Z7LCDInitv)
</UL>
<P><STRONG><a name="[67]"></a>_ZL8LCD_Sendt13LCD_SEND_TYPE</STRONG> (Thumb, 256 bytes, Stack size 24 bytes, lcdsystem.o(.text._ZL8LCD_Sendt13LCD_SEND_TYPE))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = _ZL8LCD_Sendt13LCD_SEND_TYPE &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputData
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16LCD_Send_HNibblet
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDSetPos(e_lcdline, unsigned char)
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDClearLine(e_lcdline)
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDSendChar(unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcdsystem.o(.text._Z7LCDInitv)
</UL>
<P><STRONG><a name="[10a]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
</UL>

<P><STRONG><a name="[104]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[5f]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
